# Integration Server (CleverBrag Integration) – Execution Plan

Last updated: 2025-08-03

This document lays out the **end-to-end roadmap** for building a brand-new Integration Server that re-uses Onyx connectors, supports multi-tenancy, and routes output to CleverBrag, Onyx, or future destinations.  All work is organised into numbered phases; each phase can be released independently and must ship with tests, CI, and CHANGELOG updates.

────────────────────────────────────
0.  Repository Bootstrap  (Week 0-1)
────────────────────────────────────
Deliverables
• Empty GitHub/GitLab repository: `integration-server`
• Licence (MIT or Apache-2.0)
• Monorepo structure
  ```
  backend/          # FastAPI service
  connectors/       # git-submodule or pip package pointing to onyx_connectors
  web/              # React + MUI front-end
  infra/            # Docker, k8s, terraform, etc.
  docs/
  ```
• Tooling
  – Python 3.12, Poetry, Ruff, Mypy, Pytest, Coverage
  – Node 20, PNPM, ESLint, Prettier, Cypress/Playwright
  – Pre-commit hooks
• CI pipelines (GitHub Actions): lint → unit tests → integration tests → docker build
• CHANGELOG + Conventional Commits + semantic-release

Milestones
□ Repo scaffold pushed
□ CI passing (no tests yet)
□ CHANGELOG entry recorded

────────────────────────────────────
1.  Core Domain & Auth Layer  (Week 1-2)
────────────────────────────────────
Schema (PostgreSQL 15 with RLS)
• `organizations`  – replaces previous `tenants`
  id (uuid PK) | name | created_at | billing_plan | settings JSONB
• `users`
  id | organization_id (FK) | email | hashed_pw | role | created_at
• `user_tokens` (for refresh token revocation)
• `connector_profiles` (per-org config)
• `sync_runs`      (audit & metrics)

Row-Level Security
1. `ALTER TABLE … ENABLE ROW LEVEL SECURITY;`
2. `CREATE POLICY org_isolation ON <tbl> USING (organization_id = current_setting('app.current_org')::uuid);`
3. FastAPI dependency sets `SET app.current_org = :org_id;`

Auth Abstraction
```python
class AuthProvider(Protocol):
    async def signup(self, email: str, password: str, org_name: str | None = None) -> User: ...
    async def login(self, email: str, password: str) -> TokenPair: ...
    async def refresh(self, refresh_token: str) -> TokenPair: ...
```
Implementations
• `DbAuthProvider` – bcrypt + JWT stored in `user_tokens`
• `KeycloakAuthProvider` – TODO, returns NotImplemented
• Factory selected via ENV: `AUTH_BACKEND=db|keycloak`

Testing
• Unit tests for password hashing, JWT issuance, policy enforcement (`pytest-asyncio` + `testcontainers` Postgres)

Milestones
□ RLS verified by integration test
□ AuthProvider abstraction merged
□ 90 % unit coverage in backend package
□ CHANGELOG updated

────────────────────────────────────
2.  Connector Runtime (Week 2-3) – *In-repo for GA*
────────────────────────────────────
Decision 2025-08-09: keep the Onyx connector runtime **vendored inside this repository** until GA.  Extraction and PyPI packaging becomes post-GA tech-debt.

Scope for GA
• Copy Onyx runtime & provider code into `connectors/onyx/` (already done).
• Ensure import paths `connectors.onyx…` work from backend tasks.
• Unit-test legacy connector logic where feasible.

Post-GA backlog (Phase T-D)
• Extract to `onyx-connectors` package, publish, and update server dependency.

Milestones
□ Legacy connector tests green inside monorepo
□ CHANGELOG updated (runtime stabilised)

────────────────────────────────────
3.  Orchestrator & Job Processing  (Week 3-4)
────────────────────────────────────
• Celery + Redis (later switch to RQ/Arq if preferred)
• `orchestrator.schedule` queries DB for due profiles (RLS-aware) and `delay()` tasks.
• Worker context carries `organization_id` for downstream logging.
• Back-off, retries, and incremental state reuse connector runtime code.

Tests
• Unit: task serialization, retry policy.
• Integration: containerised Postgres + Redis + Worker; create profile, trigger schedule, assert rows/states.

Milestones
✓ Worker docker image published
□ Avg sync <30 s in staging
□ CHANGELOG updated

────────────────────────────────────
4.  Destination Plugins  (Week 4-5)
────────────────────────────────────
Interface
```python
class DestinationBase(Protocol):
    name: str
    async def send(self, *, payload: Iterable[dict], profile: ConnectorProfile) -> None: ...
```
Built-in adapters
1. **CleverBrag Adapter** – pushes to CleverBrag  endpoint
2. **OnyxAdapter** – uses Onyx API key
3. **CSVDumpAdapter** – writes to S3/local for debugging

Plugin Discovery via `importlib.metadata.entry_points(group="integration_server.destinations")`.

Tests
• Unit: adapter contract (pytest parametrize across adapters)
• Integration: end-to-end sync writes to each adapter, validate result.

Milestones
□ At least two adapters prod-ready
□ CHANGELOG updated

────────────────────────────────────
4.5  API Documentation Hardening  (Week 4-5)
────────────────────────────────────
Goal
• Provide rich, accurate, and user-friendly Swagger / OpenAPI documentation for every public endpoint.

Tasks
• Add `summary=` and `description=` parameters to each `@app.get/post/...` or `@router.<method>` decorator.
• Ensure all Pydantic request/response models include descriptive docstrings and example payloads.
• Organise endpoints with meaningful `tags=[...]` (e.g., "Auth", "Orchestrator", "SyncRuns", "Destinations").
• Populate global FastAPI metadata (`title`, `version`, `terms_of_service`, `contact`, `license_info`).
• Verify generated spec via `GET /openapi.json` and Swagger-UI renders as expected (`/docs`).
• Add CI check that fails if `openapi.json` changes without committing the updated file (optional but recommended).

Tests / Verification
• Unit: a small test that calls `/openapi.json` and asserts presence of each expected path + summary text.
• Manual QA: Review Swagger UI for completeness and typos.

Milestones
□ All endpoints display non-empty summaries & descriptions.
□ Swagger UI self-contained and understandable without external docs.
□ CHANGELOG updated.

────────────────────────────────────
5.  Web UI MVP  (Week 5-7)
────────────────────────────────────
Tech
• React 18 + Vite + TypeScript
• Material UI v5 + company theme
• React Query + Zod for schema validation

Pages
1. Login / Signup
2. Org Switcher (super-admin only)
3. Dashboard (sync history per profile)
4. Connector Catalog (list & docs)
5. Profile Wizard (stepper)
6. Destinations Manager

Testing
• Component tests (Vitest + Testing-Library)
• E2E smoke (Playwright): login → create profile → run sync → see green status

CI
• Build storybook preview
• Lint, unit, E2E (headless)

Milestones
□ Lighthouse score > 90
□ First customer demo
□ CHANGELOG updated

────────────────────────────────────
6.  Observability & Ops Hardening  (Week 7-8)
────────────────────────────────────
• Structured logging (Loguru + JSON)
• Prometheus metrics, Grafana dashboards
• Sentry for backend & frontend
• Opentelemetry traces across API ↔ worker ↔ destination
• Terraform module for AWS/EKS or GCP/GKE

Milestones
□ Dashboards green in staging
□ ALERT rules in place
□ CHANGELOG updated

────────────────────────────────────
6. Connector Parity with Onyx (Week 6-8)
────────────────────────────────────
Goal
• Enable real Onyx connectors end-to-end including credentials (OAuth/static), config forms, and execution in our orchestrator.

Scope
• Discovery: enumerate available connectors and expose definitions + JSON Schemas
• Credentials: DB model, encryption strategy, provider compatible with Onyx connectors
• OAuth: generic start/callback endpoints; CSRF-safe state; PKCE where needed
• UI: Connectors page to add credentials per connector; wizard selects credential
• Orchestrator: instantiate Onyx connectors with selected credential and config
• Security: redact secrets; never leak to client; rotate/refresh tokens

Deliverables
• DB models & migrations: `Credential` (org_id, user_id, connector_name, provider_key, encrypted credential_json)
• API: `/connectors/definitions`, `/credentials` (list/create), `/oauth/{connector}/start`, `/oauth/{connector}/callback`
• UI: Connectors page (list/add credentials), wizard selects connector + credential + config schema
• Orchestrator: resolve `DocumentSource` + `credential_id` and run connector via Onyx runner
• Tests: unit (provider), integration (static connector), e2e (OAuth flow happy path)

────────────────────────────────────
Gap Analysis (Legacy vs Current)
────────────────────────────────────
1) Credentials Storage
- Legacy: Onyx DB credentials table and provider with locking, refresh & persistence
- Current: Missing. Added `Credential` model + basic CRUD (no encryption yet)
Action: add encryption-at-rest, secret redaction, Redis locks for provider

2) OAuth Handling
- Legacy: OAuthConnector contract, endpoints, state/PKCE, token exchange → credentials
- Current: Missing. Need generic start/callback per connector
Action: implement endpoints and map to connector’s OAuth class methods

3) Connector Definitions & Schemas
- Legacy: Pydantic config models surfaced to UI (JSON Schema)
- Current: Minimal schemas; only destinations have proper schema surface
Action: extract real schemas per connector (where available), include UI hints

4) Orchestrator Integration
- Legacy: instantiate connectors with credentials provider, run with InputType
- Current: mock/doc fallback; not pulling credentials
Action: wire `credential_id` into profile; fetch and pass to Onyx instantiation path

5) Tenant Context
- Legacy: contextvars-based tenant id used in many layers
- Current: RLS set; partial contextvar bridging
Action: set legacy tenant id consistently in web + worker contexts

6) UI & UX
- Legacy: account linking pages, connector lists, test connection, selection in flows
- Current: wizard exists; destinations configured; connectors minimally listed
Action: add Connectors page; pick credential in wizard; validate/test

7) Security & Secrets
- Legacy: encrypted storage; careful logging; rotation policies
- Current: plain JSON storage in MVP
Action: add encryption, masking, rotation endpoints/policies

────────────────────────────────────
Conventions
────────────────────────────────────
• **Every PR MUST**
  – update unit tests / add new ones
  – bump version per Conventional Commits
  – add entry to CHANGELOG under **Unreleased**
• Target coverage: backend ≥ 90 %, frontend ≥ 85 %
• Commander (tech lead) signs off on architecture updates. 

────────────────────────────────────
Post-MVP Note (added 2025-08-04)
────────────────────────────────────
• When Phase 2 (Connector Extraction & Packaging) finishes and `onyx_connectors` is published to the internal PyPI, remember to:
  – remove the in-repo `connectors/` directory from the main package list
  – add `onyx-connectors = "^0.1.0"` as a normal Poetry dependency in `pyproject.toml`
  – update CI to install from the private index (or use a `--extra-index-url`) 

- Extract the connector-runtime into its own package

- [ ] Phase 4 TODO: Add bulk document batching support to CleverBragDestination for performance after single-doc flow proven. 