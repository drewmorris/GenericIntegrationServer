# Generic Integration Server - Connector/Sync Focus Development Plan

Last updated: 2025-08-19  
**Status**: CORRECTED ANALYSIS - Focus on Connector/Sync Architecture Only

## 🎯 CORRECTED STATE ASSESSMENT

**✅ WHAT WE ACTUALLY HAVE (85-90%)**
- ✅ **47 Production Connectors**: Full Onyx connector ecosystem in `connectors/onyx/`
- ✅ **Connector Infrastructure**: All 6 base classes (BaseConnector, LoadConnector, PollConnector, etc.)
- ✅ **Connector Factory**: `identify_connector_class` with full connector map
- ✅ **Orchestration**: Celery tasks that run real connectors with checkpointing
- ✅ **Credentials**: Encrypted credential storage with audit trails
- ✅ **API Endpoints**: Connector definitions, profiles, credentials, sync runs
- ✅ **Multi-tenant Auth**: JWT + API keys with organization isolation
- ✅ **Basic Sync Tracking**: SyncRun model with status tracking

**❌ CRITICAL GAPS IDENTIFIED (Connector/Sync Only)**

### **1. Missing CC-Pair Architecture**
- **Issue**: We use direct profile→credential relationship
- **LegacyCode**: Uses `ConnectorCredentialPair` as core linking concept
- **Impact**: Can't have many-to-many (one credential for multiple connectors)

### **2. Missing Sophisticated IndexAttempt Tracking**
- **Issue**: Simple `SyncRun` with basic status
- **LegacyCode**: Rich `IndexAttempt` with progress tracking, heartbeats, batch coordination
- **Impact**: No progress monitoring, cancellation, or detailed error handling

### **3. Missing Status Management**
- **Issue**: Simple string status fields
- **LegacyCode**: `ConnectorCredentialPairStatus`, `IndexingStatus` enums with state machine
- **Impact**: No proper connector lifecycle management

### **4. Missing Advanced Sync Features**
- **Issue**: Basic sync without advanced capabilities
- **LegacyCode**: Permission sync, pruning, access control, batch coordination
- **Impact**: Not enterprise-ready for complex deployments

**REALITY CHECK**: We have 85-90% of functionality but need architectural improvements for production readiness.

────────────────────────────────────
PHASE 1: CORE ARCHITECTURE IMPROVEMENTS (2-3 weeks)
────────────────────────────────────
**Priority: CRITICAL** - Fix architectural gaps for production readiness

### 1.1 Implement CC-Pair Architecture (1 week)
**Goal**: Add proper Connector-Credential Pair model

**Deliverables**:
- [ ] **ConnectorCredentialPair Model** - Many-to-many linking table
- [ ] **Separate Connector Model** - Reusable connector configurations  
- [ ] **Update Profile Model** - Link to CC-Pairs instead of direct credentials
- [ ] **Migration Scripts** - Convert existing data to new structure
- [ ] **API Updates** - Update endpoints for CC-Pair management

**Success Criteria**:
□ One credential can be used with multiple connectors
□ One connector can use multiple credentials
□ Existing data migrated without loss
□ API endpoints work with new structure

### 1.2 Enhanced IndexAttempt/SyncRun (1 week)
**Goal**: Add sophisticated sync tracking

**Deliverables**:
- [ ] **Enhanced SyncRun Model** - Add progress tracking, heartbeats, batch coordination
- [ ] **Status Enums** - Proper status state machine
- [ ] **Progress Tracking** - Track batches completed, documents processed
- [ ] **Cancellation Support** - Allow sync cancellation
- [ ] **Error Handling** - Detailed error tracking and recovery

**Success Criteria**:
□ Real-time progress tracking during sync
□ Sync operations can be cancelled
□ Detailed error information for debugging
□ Proper status transitions

### 1.3 Advanced Sync Features (1 week)
**Goal**: Add enterprise-grade sync capabilities

**Deliverables**:
- [ ] **Permission Sync Options** - `auto_sync_options`, `last_time_perm_sync`
- [ ] **Pruning Support** - `last_pruned`, `prune_freq` fields
- [ ] **Access Control** - `access_type`, `admin_public` fields
- [ ] **Refresh Frequency** - Proper scheduling with validation
- [ ] **Document Counting** - Track total docs indexed

**Success Criteria**:
□ Permission sync configuration available
□ Pruning schedules configurable
□ Access control fields properly set
□ Refresh frequency validation working

────────────────────────────────────
PHASE 2: WEB UI IMPROVEMENTS (1-2 weeks)
────────────────────────────────────
**Priority: HIGH** - Update UI for new architecture

### 2.1 CC-Pair Management UI (1 week)
**Goal**: Update UI for Connector-Credential Pairs

**Deliverables**:
- [ ] **CC-Pair Creation Flow** - Link connectors to credentials
- [ ] **CC-Pair Management** - List, edit, delete CC-Pairs
- [ ] **Connector Reuse** - Show connector configurations that can be reused
- [ ] **Credential Sharing** - Show which credentials are used by multiple connectors
- [ ] **Status Dashboard** - Show CC-Pair status and health

**Success Criteria**:
□ Users can create CC-Pairs easily
□ Clear visibility into connector/credential relationships
□ Status dashboard shows system health
□ Connector configurations can be reused

### 2.2 Enhanced Sync Monitoring (1 week)
**Goal**: Real-time sync progress and management

**Deliverables**:
- [ ] **Progress Bars** - Real-time sync progress visualization
- [ ] **Sync Cancellation** - Cancel running syncs from UI
- [ ] **Detailed Error Display** - Show detailed error information
- [ ] **Sync History** - Enhanced sync history with filtering
- [ ] **Batch Progress** - Show batch-level progress

**Success Criteria**:
□ Real-time progress updates during sync
□ Users can cancel long-running syncs
□ Clear error messages help troubleshooting
□ Sync history is searchable and filterable

────────────────────────────────────
PHASE 3: PRODUCTION POLISH (1-2 weeks)
────────────────────────────────────
**Priority: MEDIUM** - Production readiness improvements

### 3.1 Enhanced Monitoring (1 week)
**Goal**: Better observability and monitoring

**Deliverables**:
- [ ] **Sync Metrics** - Prometheus metrics for sync operations
- [ ] **Performance Monitoring** - Track sync performance over time
- [ ] **Error Alerting** - Alert on sync failures and errors
- [ ] **Health Checks** - Enhanced health checks for all components
- [ ] **Logging Improvements** - Structured logging with correlation IDs

**Success Criteria**:
□ Comprehensive metrics available
□ Performance trends visible
□ Automated alerting on issues
□ Structured logs for debugging

### 3.2 Documentation & Testing (1 week)
**Goal**: Complete documentation and testing

**Deliverables**:
- [ ] **API Documentation** - Update OpenAPI specs for new endpoints
- [ ] **User Documentation** - Guide for CC-Pair management
- [ ] **Integration Tests** - End-to-end tests for new architecture
- [ ] **Performance Tests** - Load testing for sync operations
- [ ] **Migration Guide** - Guide for upgrading existing deployments

**Success Criteria**:
□ Complete API documentation
□ User guides for new features
□ Comprehensive test coverage
□ Performance benchmarks established

────────────────────────────────────
TIMELINE SUMMARY
────────────────────────────────────

**Current State**: 85-90% complete with architectural gaps
**Phase 1**: Core Architecture (Weeks 1-3) - 2-3 weeks
**Phase 2**: UI Improvements (Weeks 4-5) - 1-2 weeks  
**Phase 3**: Production Polish (Weeks 6-7) - 1-2 weeks

**Total Timeline**: 4-7 weeks to production-ready system
**Core Architecture**: 2-3 weeks for architectural improvements
**Full System**: 4-7 weeks for complete production readiness

**Critical Path**: Phase 1 architectural improvements must be completed first.

────────────────────────────────────
SUCCESS METRICS
────────────────────────────────────

**Phase 1 Success**:
- CC-Pair architecture enables flexible connector/credential relationships
- Enhanced sync tracking provides real-time progress and cancellation
- Advanced sync features support enterprise deployments
- All existing functionality preserved during migration

**Phase 2 Success**:
- UI provides clear visibility into CC-Pair relationships
- Real-time sync monitoring improves user experience
- Sync management features reduce operational overhead
- User experience is intuitive and efficient

**Overall Success**:
- Production-ready connector synchronization system
- Enterprise-grade features (permission sync, access control)
- Scalable architecture supporting multiple tenants
- Comprehensive monitoring and observability

────────────────────────────────────
ARCHITECTURE DECISIONS
────────────────────────────────────

**Key Changes**:
- Adopt CC-Pair architecture from LegacyCode for flexibility
- Enhance sync tracking for production monitoring
- Add enterprise features for business deployments
- Maintain all existing connector functionality

**Technology Stack** (Unchanged):
- Backend: FastAPI + SQLAlchemy + PostgreSQL + Redis
- Frontend: React 18 + TypeScript + Material-UI + Vite
- Task Queue: Celery with Redis broker
- Connectors: Existing Onyx connector ecosystem

**Design Principles**:
- Preserve existing functionality during migration
- Follow LegacyCode patterns for proven architecture
- Maintain backward compatibility where possible
- Focus on connector/sync functionality only

────────────────────────────────────
NEXT STEPS
────────────────────────────────────

**Immediate Actions**:
1. Start with CC-Pair model implementation
2. Create migration scripts for existing data
3. Update API endpoints for new architecture
4. Test migration with existing profiles/credentials

**Development Workflow**:
- Each change must preserve existing functionality
- Migration scripts must be thoroughly tested
- API changes must maintain backward compatibility
- UI updates should be incremental and tested

**Risk Mitigation**:
- Comprehensive testing before each migration step
- Backup existing data before structural changes
- Gradual rollout of new features
- Rollback plan for each major change