## 2025-08-04 (0.1.3)
- Moved devcontainer to custom Dockerfile (`.devcontainer/Dockerfile`) based on `python:3.11-bullseye`.
- Dockerfile installs common CLI tools and creates `vscode` user with password-less sudo to ensure VS Code Remote Containers works correctly.
- `devcontainer.json` now uses the Dockerfile build and removes the empty `features` section.

## 2025-08-04 (0.2.0)
- Project bootstrap: add Poetry `pyproject.toml`, FastAPI `backend` package with health endpoint, authentication interfaces & stub `DbAuthProvider`.
- Extracted Onyx connector runtime already available under `connectors/onyx` and linked as editable dependency.

## 2025-08-04 (0.3.0)
- Added initial database layer using SQLAlchemy async: base, session, and core models (`Organization`, `User`, `UserToken`).
- Introduced stub `shared_configs.contextvars` to satisfy connector runtime imports without referencing `LegacyCode`.

## 2025-08-04 (0.4.0)
- Added Pydantic `Settings` for configuration.
- Implemented secure password hashing utilities.
- Refactored `DbAuthProvider` to support async Postgres backend while retaining in-memory fallback.
- Created FastAPI auth routes (`/auth/signup`, `/auth/login`) with request/response schemas.
- Added database session dependency and mounted routes in main app.
- New runtime deps: `alembic`, `python-dotenv`.

## 2025-08-04 (0.4.1)
- Introduced initial pytest suite: `tests/test_health.py` verifies health endpoint; `tests/test_auth.py` covers signup & login using in-memory auth provider via dependency override.

## 2025-08-04 (0.5.0)
- Added Alembic configuration (`backend/alembic.ini`) and migration environment.
- Created initial migration `20250804_01_initial.py` with organizations, users, usertokens tables.
- Updated `TODO_CleverBrag_Integration` with reminder to publish `onyx_connectors` package and update dependency in Phase 2.

## 2025-08-04 (0.6.0)
- Added Row Level Security (RLS) migration `20250804_02_rls.py` enabling tenant isolation on `user` and `usertoken` tables.
- Introduced `backend.db.rls.set_current_org` helper and updated `get_db` dependency to set `app.current_org` based on `X-Org-ID` header.
- Added dependency helpers in `backend/deps.py`.
- New endpoint `/auth/refresh` issues new token pairs.
- Tests updated and still green.

## 2025-08-04 (0.7.0)
- Added Testcontainers-based integration test (`tests/integration/test_rls.py`) that spins up Postgres, runs Alembic migrations, signs up users in two orgs, and verifies RLS isolation.
- Introduced `testcontainers[postgresql]` dev dependency.
- Auth provider factory integrated into routes; tests updated accordingly.

## 2025-08-04 (0.8.0)
- Introduced GitHub Actions workflow `.github/workflows/ci.yml` running Ruff lint, Mypy type checks, unit + integration tests (with Postgres service).

## 2025-08-05 (0.9.0)
- Phase 2 kick-off: added smoke test ensuring `connectors.onyx` runtime can be imported and subclassed (`tests/test_connector_import.py`).

## 2025-08-05 (0.10.0)
- Phase 3 kickoff: added Celery orchestrator scaffold (`backend/orchestrator`) with Redis broker, dummy `sync_dummy` task, and `/orchestrator/sync/{profile_id}` endpoint to enqueue a job.

## 2025-08-05 (0.10.1)
- Added periodic scheduler task `scan_due_profiles` running every minute via Celery beat, enqueuing dummy sync jobs and updating `next_run_at`.
- Added `interval_minutes` and `next_run_at` fields to `ConnectorProfile` with migration `20250805_01_schedule`.
- `sync_dummy` and trigger endpoint now carry `org_id` for context.

## 2025-08-05 (0.10.2)
- ConnectorProfile now linked to User via `user_id`; migration `20250805_02_profile_user`.
- Scheduler enqueues sync tasks with `user_id` and `organization_id`; `sync_dummy` logs both.

## 2025-08-07 (0.10.3)
- Added Phase 4.5 *API Documentation Hardening* to `TODO_CleverBrag_Integration`: enrich `summary` and `description` fields on all FastAPI endpoints, improve global metadata, tag grouping, and Swagger verification tests.
- No functional code changes yet; roadmap updated to track work.

## 2025-08-07 (0.10.4)
- Fixed unit test `test_cleverbrag_retry` monkeypatch to accept variable keyword arguments, preventing TypeError and restoring green test suite.

## 2025-08-07 (0.10.5)
- Added targeted unit-tests to raise coverage (>85%) for:
  `backend/destinations/csvdump.py`, `backend/destinations/onyx.py`, `backend/deps.py`, `backend/orchestrator/scheduler.py`, `backend/orchestrator/task_utils.py`, and `backend/orchestrator/tasks.py`.
- New test files: `tests/test_destinations_csvdump.py`, `tests/test_destinations_onyx.py`, `tests/test_deps.py`, `tests/test_scheduler.py`, `tests/test_task_utils.py`, `tests/test_tasks.py`.

## 2025-08-07 (0.11.0)
- Added CRUD API for ConnectorProfile (list/create/read/update) at `/profiles/*` with Pydantic schemas.
- New module `backend/schemas/profiles.py`, route `backend/routes/profiles.py`, router registered in `backend/main.py`.
- Added unit tests `tests/test_profiles.py` with fake in-memory session.

## 2025-08-07 (0.11.1)
- Added rich OpenAPI metadata: global description, terms, contact, license.
- Added `summary` and `description` to Auth, Orchestrator, and Profiles routes to improve Swagger documentation (Phase 4.5).

## 2025-08-07 (0.12.0)
- Phase 5 kickoff: added `web/` React + Vite scaffold with Material UI, React Router, React Query and Zod dependencies.
- Basic pages: `Login`, `App` router, entry `main.tsx`; Vite config, tsconfig, package.json.
- Front-end build scripts (`dev`, `build`, `preview`, `lint`).

## 2025-08-07 (0.12.1)
- Added basic React auth context, Axios API wrapper with auth header, React Query provider.
- Implemented Login page using backend `/auth/login`, storing tokens and protecting routes.
- Created `ProfilesList` page with hook fetching `/profiles` and table display; wired routing.

## 2025-08-07 (0.12.3)
- Added SyncRuns page and hook to display run history; links from profile name.
- ProfilesList links to runs; routing extended.

## 2025-08-07 (0.12.4)
- Added global Snackbar provider (notistack) with helper hook; wrapped application.
- Profile Wizard shows success toast on creation.
- Axios response interceptor refreshes access token on 401 or logs out.

## 2025-08-07 (0.12.5)
- Added TopNav AppBar with organization selector (simple localStorage), logout button, and brand link.
- Routing now displays navigation bar when authenticated.

## 2025-08-07 (0.12.6)
- Added ProfileEdit page and update hook; list view now links to edit, routing extended.
- Snackbar success on update.

## 2025-08-07 (0.12.7)
- Dashboard now shows total connector profile count via new hook.

## 2025-08-07 (0.12.8)
- Global Axios error interceptor now shows notistack error snackbars for failed requests.

## 2025-08-07 (0.12.9)
- Added Vitest configuration and first React unit test (Login heading) with Testing Library.
- Added MSW, jest-dom dev deps and test script in package.json.
- Added GitHub Actions workflow `web-ci.yml` running lint, tests, and build for `web/` folder.

## 2025-08-07 (0.12.10)
- Added Prettier formatting: config `.prettierrc.json`, dev dependency, `format` and `format:check` npm scripts.
- Web CI workflow now runs Prettier check.

## 2025-08-08 (0.12.11)
- Added Node.js 20 and npm installation to devcontainer Dockerfile to enable front-end tooling (`web/`).

## 2025-08-08 (0.12.12)
- Added project-specific `requirements/default.txt` and `requirements/dev.txt` replacing LegacyCode dependency installation.
- Dockerfile now copies and installs these requirements during build.
- devcontainer postCreateCommand now installs the project in editable mode (`pip install -e .`).

## 2025-08-08 (0.12.13)
- Devcontainer improvements:
  - Added build tools (`build-essential`, `libssl-dev`, `libffi-dev`, `libpq-dev`) and `docker.io` to Dockerfile for Python packages with native extensions and Testcontainers support.
  - Added `vscode` user to `docker` group and bind-mounted host Docker socket to enable Testcontainers inside container.
  - Updated `postCreateCommand` to install front-end dependencies via `npm ci --prefix web`.

## 2025-08-08 (0.12.14)
- Devcontainer build fix: added `gnupg` and `dirmngr` packages so NodeSource script can import GPG key during Node installation.

## 2025-08-08 (0.12.15)
- Fixed devcontainer build failure: set `build.context` to `..` so Docker build can access `requirements/` directory at workspace root.

## 2025-08-08 (0.12.16)
- Changed devcontainer `postCreateCommand` from `npm ci` to `npm install` because `web/package-lock.json` does not yet exist.

## 2025-08-08 (0.12.17)
- Improved `postCreateCommand`: now runs via bash with `set -e`, installs Python package first, then conditionally runs `npm ci` or `npm install` inside `web/`, ensuring proper directory context and early failure on errors.

## 2025-08-09 (0.12.18)
- Added `email-validator` runtime dependency because Pydantic models rely on it for `EmailStr` validation.
- Kept `httpx` at ^0.27.0 for compatibility with FastAPIâ€™s pinned Starlette, avoiding TestClient breakage.

## 2025-08-09 (0.12.19)
- Synced Python requirements: added `httpx==0.27.0` and `email-validator==2.2.0` to `requirements/default.txt` so the devcontainer rebuild installs them automatically.

## 2025-08-09 (0.12.20)
- Re-enabled strict ESLint rules and fixed remaining lint errors across the web front-end:
  * Removed duplicate `SnackbarContext` in favour of typed `components/Snackbar.tsx`.
  * Typed Snackbar helpers, removed `// @ts-nocheck`, replaced undefined returns.
  * Cleaned `TopNav` unused import, fixed import order warnings.
  * Added `@types/uuid` devDependency and updated `ProfileWizard` to use typed UUID.
  * Suppressed false-positive `react/no-unknown-property` on MUI `Typography`.
- Fixed backend test failure: exported `sync_dummy.delay` from scheduler again so `test_scan_due_profiles` can monkey-patch.
- All `npm run lint -- --max-warnings=0`, `vitest` and `pytest` now pass cleanly.

## 2025-08-09 (0.12.21)
- Reinstated strict MyPy configuration with official SQLAlchemy plugin.
- Removed `sqlalchemy2-stubs` (conflicted with plugin).
- Fixed Alembic migration typings and env script imports; MyPy now reports zero errors.

## 2025-08-10 (0.12.22)
- Phase 3 hardening kick-off: 
  * Added retry/back-off (`autoretry_for`, exponential) and late-ack to `sync_connector` task.
  * Scheduler now checks `sync_runs` table to skip profiles already running/pending, preventing duplicate jobs.
- All tests green after new connector and orchestrator test suites.

## 2025-08-10 (0.12.23)
- Added Celery worker Docker image (`worker/Dockerfile`) and GitHub Actions workflow `worker.yml` to build/test/push image.
- Added unit test `test_retry_policy.py` verifying task retry settings.
- Marked Phase 3 milestone (worker image) complete in TODO.

## 2025-08-10 (0.12.24)
### Fixed
* CI Postgres migrations failing with `syntax error at or near "user"` by quoting reserved table name in `20250804_02_rls.py` (`"user"`).
* Testcontainers Redis v4 compatibility: integration tests now build fallback Redis URL when `get_connection_url()` is absent (`tests/integration/test_destination_end_to_end.py`, `tests/integration/test_sync_scheduler.py`).
* Integration tests now robustly convert sync SQLAlchemy URLs (e.g. `postgresql://` or `postgresql+psycopg2://`) to `postgresql+asyncpg://` using regex to fix CI error loading async engine.

## 2025-08-10 (0.12.25)
### Fixed
* Celery result backend initialization issues in CI: after setting `broker_url`/`result_backend`, tests now refresh backend via `celery_app._get_backend()` in both parent and worker processes.
* Propagate Testcontainers Postgres settings to worker subprocess so scheduler DB engine picks the correct container DB.
* Converted scheduler task to sync wrapper with async implementation and added async alias for unit tests, avoiding coroutine serialization and nested event loop errors.
### Dev
* `check_codebase.sh` gains `--ci-emulate` and `--gh`, graceful Docker detection, Alembic smoke migration, and pytest env isolation to better mirror CI locally.

## 2025-08-10 (0.12.26)
- Added `--no-web-checks` flag to `check_codebase.sh`. When used (alone or with `--ci-emulate`), the script skips all web-related steps (Prettier, ESLint, Web Unit Tests, Web Build) to speed up backend-only runs.

## 2025-08-10 (0.12.27)
### Changed
* `check_codebase.sh` no longer runs `--gh` (local GitHub Actions via `act`) if any prior selected steps fail; it prints a skip message and exits after the summary. This prevents noisy failures until earlier test issues are resolved.

### Fixed
* Integration tests flakiness around scheduler DB connection and event loops:
  - Refactored `backend/orchestrator/scheduler.py` to create a fresh async engine/session factory per invocation, avoiding cross-event-loop issues in CI runners.
  - `tests/integration/test_destination_end_to_end.py` and `tests/integration/test_sync_scheduler.py` now export `POSTGRES_*` env vars from the Testcontainers Postgres URL before invoking the scheduler, ensuring it connects to the same database as the test session.
  - When using in-memory broker in tests, call and await `scan_due_profiles_async()` directly instead of Celery `.apply()`/`.apply_async()` to avoid nested event loop errors.

## 2025-08-10 (0.12.28)
### Changed
* `start_core_services.sh` now runs Postgres without binding the container port to the host, avoiding collisions when 5432 is already in use.
* The script detects the container's internal IP and exports it via `POSTGRES_HOST`; `POSTGRES_PORT` is fixed at 5432. Alembic migrations are now executed against this IP, fully eliminating `connection refused` errors during startup.
### Added
* `run.sh` now accepts `start` (alias of `dev`) and usage message lists all valid commands (`start|dev|prod|stop`).

## 2025-08-10 (0.12.29)
### Changed
* `run.sh` now automatically invokes `start_core_services.sh` before launching backend, Celery, and web dev/prod servers, ensuring Postgres and Redis are available and avoiding connection errors.
* It detects the Redis container IP and exports `REDIS_URL`, `CELERY_BROKER_URL`, and `CELERY_RESULT_BACKEND` so Celery connects reliably (previous defaults pointed at localhost and failed). If Docker inspection fails (e.g., remote Docker Desktop), it falls back to `host.docker.internal`.
* Web dev server now runs with `--host 0.0.0.0` and production `serve` binds to `0.0.0.0`, so the UI is accessible via localhost or forwarded ports in remote containers.

## 2025-08-10 (0.12.30)
### Added
* Web: Signup page (`web/src/pages/Signup.tsx`) with org name, email, and password; logs in automatically after successful signup.
* Routing: `/signup` route and link from `/login` to `/signup`.
### Changed
* Dev server: Vite now proxies API paths (`/auth`, `/profiles`, `/orchestrator`) to `http://localhost:8000` so the web app talks to the backend without CORS issues during development.

## 2025-08-10 (0.12.31)
### Changed
* `run.sh stop` is now more robust: terminates child processes, waits for exit, then sends SIGKILL if needed, and includes pattern-based fallbacks to ensure ports are freed between restarts.

## 2025-08-10 (0.12.32)
### Added
* `start_core_services.sh` now writes resolved connection settings to `.core_env` (`POSTGRES_*`, `REDIS_URL`).
* `run.sh` sources `.core_env` on start so backend/Celery consistently use the same DB/Redis endpoints.
